#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

set_classless_routes() {
	local max=128
	local type
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2"
		max=$(($max-1))
		shift 2
	done
}

setup_interface () {
    #OK_PATCH
    proto_init_update "$IFNAME" 0
    proto_send_update "$INTERFACE"
    #end of OK_PATCH

	proto_init_update "$IFNAME" 1
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	for i in $router; do
		if [ "$INTERFACE" = "lan1" -o "$INTERFACE" = "lan" ]
        then
            proto_add_ipv4_route 0.0.0.0 0 "$i"
        else
		    proto_add_ipv4_route "$ip" "$subnet"  "$i" 100
        fi
	done

	# CIDR STATIC ROUTES (rfc3442)
	[ -n "$staticroutes" ] && set_classless_routes $staticroutes
	[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes

	for dns in $dns; do
		proto_add_dns_server "$dns"
	done
	for domain in $domain; do
		proto_add_dns_search "$domain"
	done
	proto_send_update "$INTERFACE"
    echo "ifname:$IFNAME, interface:$INTERFACE, ip:$ip, subnet:$subnet, dns:$dns, domain:$domain" | logger

# add option43 servers into capwapc config file
    echo "==>option43 $acaddr" | logger
    [ -n "$acaddr" ] && {
        server=`echo $acaddr | awk -F',' '{print $1}'`
        [ -n "$server" ] && {
            uci set capwapc.server.opt43_mas_server=$server
        }
        server=`echo $acaddr | awk -F',' '{print $2}'`
        [ -n "$server" ] && {
            uci set capwapc.server.opt43_sla_server=$server
        }
        uci commit capwapc
    }

# TODO
# [ -n "$ntpsrv" ] && 	change_state network "$ifc" lease_ntpsrv "$ntpsrv"
	# [ -n "$timesvr" ] && 	change_state network "$ifc" lease_timesrv "$timesvr"
	# [ -n "$hostname" ] &&	change_state network "$ifc" lease_hostname "$hostname"
	# [ -n "$timezone" ] && 	change_state network "$ifc" lease_timezone "$timezone"
}

deconfig_interface() {
	#proto_init_update "*" 0
	#proto_send_update "$INTERFACE"
    #OK_PATCH
    config_load network
    config_get _dhcp_default_ip $INTERFACE dhcp_default_ip
    config_get _dhcp_default_netmask $INTERFACE dhcp_default_netmask
    config_get _dhcp_default_gateway $INTERFACE dhcp_default_gateway

    [ -n "$_dhcp_default_ip" ] && {
    proto_init_update "$IFNAME" 1
    proto_add_ipv4_address "$_dhcp_default_ip" "${_dhcp_default_netmask:-255.255.255.0}"
    proto_add_ipv4_route "0.0.0.0" "0" "$_dhcp_default_gateway"
    proto_send_update "$INTERFACE"
    }
    #end of OK_PATCH
}

case "$1" in
	deconfig)
		deconfig_interface
	;;
	renew|bound)
		setup_interface
	;;
esac

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user

exit 0
